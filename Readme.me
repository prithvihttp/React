#REACT: HOOKS

1. useState: is a React Hook that allows functional components to have and manage state (i.e., data that can change over time).
 Syntax of useState
const [state, setState] = useState(initialValue);

2.useCallback: is a React Hook used to memoize a function, so it doesn't get recreated on every render â€” unless its dependencies change.
Syntax
const memoizedCallback = useCallback(() => {
  // your function logic
}, [dependencies]);

3.useEffect is a React Hook that lets you run side effects in your functional components â€” like:

Fetching data

Setting up timers

Subscribing to events

Updating the DOM directly

ðŸ“Œ What is a Side Effect?
A side effect is anything that:

Happens outside the component rendering (like HTTP requests)

Or interacts with the browser/environment (like setTimeout, localStorage, or event listeners)

SYNTAX
useEffect(() => {
  // your side effect code here

  return () => {
    // (optional) cleanup code here
  };
}, [dependencies]);